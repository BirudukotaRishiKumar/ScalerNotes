def merge(a,s,e):
    inversionPairsCount=0 #1
    if s>=e:
        return inversionPairsCount #2
    m=(s+e)//2
    inversionPairsCount+=merge(a,s,m) #3
    inversionPairsCount+=merge(a,m+1,e)
    inversionPairsCount+=merging(a,s,m,e)
    
    return inversionPairsCount

def merging(a,s,m,e):
    firstPartArray=a[s:m+1]
    secondPartArray=a[m+1:e+1] 
    #print(firstPartArray,secondPartArray)
    lengthOfFirstPartArray=m-s+1
    lengthOfSecondPartArray=e-m
    i=0
    j=0
    inversionPairsCount=0 #4
    n=lengthOfFirstPartArray+lengthOfSecondPartArray
    for index in range(s,e+1):
        if j==lengthOfSecondPartArray:
            a[index]=firstPartArray[i]
            i+=1
        elif i==lengthOfFirstPartArray:
            a[index]=secondPartArray[j]
            #inversionPairsCount+=1
            # ans+=firstPartArray[i]
            j+=1
        elif firstPartArray[i]<=secondPartArray[j]:
            a[index]=firstPartArray[i]
            # ans+=firstPartArray[i]
            i+=1
        else:
            a[index]=secondPartArray[j] #Invesrsion pairs
            inversionPairsCount+=lengthOfFirstPartArray-i #5
            # ans+=secondPartArray[j]
            j+=1
        # print(i,j,ans)
    return inversionPairsCount #6
    print(i,j,firstPartArray,secondPartArray,inversionPairsCount)
        
    

a=[4,3,2,1]
# a=[4,5,1,2,6,3]
# a=[2, 0, 1, 3]
n=len(a)
s=0
e=n-1    
# count=0
print(merge(a,s,e))
