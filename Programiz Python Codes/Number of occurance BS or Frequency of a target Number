#Number Of Occurances of A Number
#First Occurance
def findFirstOccuranceOfTargetUsingBinarySearch(a,n,target):
    start=0
    end=n-1
    while(start<=end):
        mid=start+(end-start)//2
        if a[mid]==target:
            if mid==0:
                return mid
            elif a[mid-1]==a[mid]: #Go Left
                end=mid-1
            else:
                return mid
        elif target<a[mid]: #Target is Left
            end=mid-1 #Go Left
        else: #Target is Right
            start=mid+1 #Go right
    return -1

#Last Occurance
def findLastOccuranceOfTargetUsingBinarySearch(a,n,target):
    start=0
    end=n-1
    while(start<=end):
        mid=start+(end-start)//2
        if a[mid]==target:
            if mid==n-1:
                return mid
            elif a[mid+1]==a[mid]: #Go right
                start=mid+1
            else:
                return mid
        elif target<a[mid]: #Target is Left
            end=mid-1 #Go Left
        else: #Target is Right
            start=mid+1 #Go right
    return -1


a=[1,1,2,2,2,3,4,4,4,5,5,5,5,5,6,6,7,8,9,9,10]
target=5
n=len(a)
numberOfOccurancesOfTarget= findLastOccuranceOfTargetUsingBinarySearch(a,n,target)- findFirstOccuranceOfTargetUsingBinarySearch(a,n,target)+1
print(numberOfOccurancesOfTarget)


